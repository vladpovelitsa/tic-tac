{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","randomPosition","emptySquares","this","slice","addOs","Math","floor","random","checkPosition","calculateWinner","length","alert","window","location","reload","setState","push","autoPlay","handleClick","status","winner","renderSquare","React","Component","Game","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAOPC,E,kDACJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJM,E,wDAQPC,GACV,IAAIC,EACEC,EAAe,GACfN,EAAUO,KAAKR,MAAMC,QAAQQ,QAkBnC,SAASC,IAEP,OADAJ,EAAiBK,KAAKC,MAAuB,GAAhBD,KAAKE,UAIpC,SAASC,IACP,IAAIC,EAAgBd,GAGf,OAA4B,IAAxBM,EAAaS,QACpBC,MAAM,0CACNC,OAAOC,SAASC,eAGTnB,EAAQK,IAAsC,IAAnBA,GAClCI,IACAI,KAGAb,EAAQK,GAAkB,KApC1BS,EAAgBd,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAK,IACbG,KAAKa,SAAS,CACZpB,QAAQA,IAGV,SAAkBA,GAChB,IAAK,IAAII,EAAI,EAAGA,GAAKJ,EAAQe,OAAS,EAAGX,IACrB,MAAdJ,EAAQI,IACVE,EAAae,KAAKrB,EAAQI,IAG9BK,IACAI,IAwBFS,CAAStB,M,mCAIEI,GAAI,IAAD,OACd,OAAO,kBAACX,EAAD,CACGI,MAAOU,KAAKR,MAAMC,QAAQI,GAC1BR,QAAU,kBAAM,EAAK2B,YAAYnB,Q,+BAK3C,IAAIoB,EAAS,kBACPC,EAASX,EAAgBP,KAAKR,MAAMC,SAW1C,OATEwB,EADY,KAAVC,EACO,WAEQ,KAAVA,EACE,cAGA,iBAIT,6BACE,yBAAK9B,UAAU,UAAU6B,GACzB,yBAAK7B,UAAU,aACZY,KAAKmB,aAAa,GAClBnB,KAAKmB,aAAa,GAClBnB,KAAKmB,aAAa,IAErB,yBAAK/B,UAAU,aACZY,KAAKmB,aAAa,GAClBnB,KAAKmB,aAAa,GAClBnB,KAAKmB,aAAa,IAErB,yBAAK/B,UAAU,aACZY,KAAKmB,aAAa,GAClBnB,KAAKmB,aAAa,GAClBnB,KAAKmB,aAAa,IAGrB,4BAAQ/B,UAAU,UAAUC,QAAS,WAAMqB,OAAOC,SAASC,WAA3D,kB,GA/FYQ,IAAMC,WAqGpBC,E,uKAEF,OACE,yBAAKlC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,OAEF,yBAAKH,UAAU,aACb,8BACA,mC,GATSgC,IAAMC,WAgBzB,SAASd,EAAgBd,GAWvB,IAVA,IAAM8B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA1B,EAAI,EAAGA,EAAI0B,EAAMf,OAAQX,IAAK,CAAC,IAAD,cACnB0B,EAAM1B,GADa,GAC9B2B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIjC,EAAQ+B,IAAM/B,EAAQ+B,KAAO/B,EAAQgC,IAAMhC,EAAQ+B,KAAO/B,EAAQiC,GACpE,OAAOjC,EAAQ+B,GAGnB,OAAO,KAKTG,IAASC,OACP,kBAACN,EAAD,MACAO,SAASC,eAAe,W","file":"static/js/main.8067a2f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    let randomPosition;\r\n    const emptySquares = [];\r\n    const squares = this.state.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = 'X';\r\n    this.setState({\r\n      squares:squares,\r\n    })\r\n\r\n    function autoPlay(squares) {\r\n      for (let i = 0; i <= squares.length - 1; i++) {\r\n        if (squares[i] == null) {\r\n          emptySquares.push(squares[i]);\r\n        }\r\n      }\r\n      addOs()\r\n      checkPosition()\r\n    }\r\n    function addOs(){\r\n      randomPosition = Math.floor((Math.random() * 10));\r\n      return randomPosition\r\n    }      \r\n    \r\n    function checkPosition() {\r\n      if (calculateWinner(squares)) {\r\n        return\r\n      }\r\n      else if (emptySquares.length === 0 ) {\r\n        alert('here is no Winner now! Try again!')\r\n        window.location.reload()\r\n        return\r\n      }\r\n      else if (squares[randomPosition] || randomPosition === 9) {\r\n        addOs()\r\n        checkPosition()\r\n      }\r\n      else {\r\n        squares[randomPosition] = 'O';\r\n      }\r\n    }\r\n    autoPlay(squares)\r\n\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return <Square \r\n              value={this.state.squares[i]}\r\n              onClick= {() => this.handleClick(i)}\r\n            />;\r\n  }\r\n\r\n  render() {\r\n    let status = 'Take your turn '\r\n    const winner = calculateWinner(this.state.squares);\r\n    if (winner == 'X') {\r\n      status = 'You Win!';\r\n    }\r\n    else if (winner == 'O') {\r\n      status = 'You Lose :(';      \r\n    }\r\n    else {\r\n      status = 'Take your turn';      \r\n\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n\r\n        <button className='restart' onClick={()=> {window.location.reload()}}> Restart </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{/* status */}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}